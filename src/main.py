#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ç-–ø—Ä–æ–µ–∫—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
–ê–≤—Ç–æ—Ä: Junior Data Analyst
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append('')

from scraping import ReviewScraper
from processing import ReviewProcessor
from analysis import ReviewAnalyzer


def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    directories = [
        'data/raw',
        'data/processed',
        'data/external',
        'notebooks'
    ]

    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")


def run_full_pipeline():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤"""
    print("=" * 60)
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –ê–ù–ê–õ–ò–ó–ê –û–¢–ó–´–í–û–í")
    print("=" * 60)

    # 1. –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    create_directories()

    # 2. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (—Å–∫—Ä–∞–ø–∏–Ω–≥)
    print("\n2Ô∏è‚É£ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
    scraper = ReviewScraper()
    try:
        raw_data = scraper.get_sample_data()
        print(f"‚úì –°–æ–±—Ä–∞–Ω–æ {len(raw_data)} –æ—Ç–∑—ã–≤–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    processor = ReviewProcessor()
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        df = processor.load_data()
        if df is not None:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            processed_df = processor.process_reviews(df)
            if processed_df is not None:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º
                processor.save_processed_data(processed_df)

                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = processor.get_summary_stats(processed_df)
                print("‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
                for key, value in stats.items():
                    if isinstance(value, dict):
                        print(f"  {key}:")
                        for k, v in value.items():
                            print(f"    {k}: {v}")
                    else:
                        print(f"  {key}: {value}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

    # 4. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    print("\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
    analyzer = ReviewAnalyzer()
    try:
        analyzer.run_full_analysis()
        print("‚úì –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

    # 5.