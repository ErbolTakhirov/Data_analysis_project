import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from processing import ReviewProcessor

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π",
    page_icon="üìä",
    layout="wide"
)


class ReviewDashboard:
    def __init__(self):
        self.df = None

    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            self.df = pd.read_csv('data/processed/processed_reviews.csv')
            self.df['date'] = pd.to_datetime(self.df['date'])
            return True
        except FileNotFoundError:
            return False

    def show_header(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        st.title("üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")
        st.markdown("---")

        if self.df is not None:
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", len(self.df))

            with col2:
                avg_rating = self.df['rating'].mean()
                st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{avg_rating:.2f}")

            with col3:
                positive_pct = len(self.df[self.df['sentiment_category'] == '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è']) / len(self.df) * 100
                st.metric("–ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤", f"{positive_pct:.1f}%")

            with col4:
                avg_words = self.df['word_count'].mean()
                st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞", f"{avg_words:.0f} —Å–ª–æ–≤")

    def show_rating_analysis(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        st.header("üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")

        col1, col2 = st.columns(2)

        with col1:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            rating_counts = self.df['rating'].value_counts().sort_index()
            fig_bar = px.bar(
                x=rating_counts.index,
                y=rating_counts.values,
                labels={'x': '–†–µ–π—Ç–∏–Ω–≥', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'},
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤',
                color=rating_counts.values,
                color_continuous_scale='viridis'
            )
            st.plotly_chart(fig_bar, use_container_width=True)

        with col2:
            # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–µ–π—Ç–∏–Ω–≥–∞
            rating_categories = self.df['rating_category'].value_counts()
            fig_pie = px.pie(
                values=rating_categories.values,
                names=rating_categories.index,
                title='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤'
            )
            st.plotly_chart(fig_pie, use_container_width=True)

    def show_sentiment_analysis(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        st.header("üòä –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")

        col1, col2 = st.columns(2)

        with col1:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            sentiment_counts = self.df['sentiment_category'].value_counts()
            colors = ['#ff6b6b', '#feca57', '#48dbfb']
            fig_pie = px.pie(
                values=sentiment_counts.values,
                names=sentiment_counts.index,
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
                color_discrete_sequence=colors
            )
            st.plotly_chart(fig_pie, use_container_width=True)

        with col2:
            # Scatter plot —Ä–µ–π—Ç–∏–Ω–≥ vs —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            fig_scatter = px.scatter(
                self.df,
                x='rating',
                y='sentiment_score',
                color='sentiment_category',
                title='–†–µ–π—Ç–∏–Ω–≥ vs –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å',
                labels={'rating': '–†–µ–π—Ç–∏–Ω–≥', 'sentiment_score': 'Score —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏'},
                hover_data=['text']
            )
            st.plotly_chart(fig_scatter, use_container_width=True)

        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        correlation = self.df['rating'].corr(self.df['sentiment_score'])
        st.info(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é: {correlation:.3f}")

    def show_text_analysis(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        st.header("üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤")

        col1, col2 = st.columns(2)

        with col1:
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª–∏–Ω—ã –æ—Ç–∑—ã–≤–æ–≤
            fig_hist = px.histogram(
                self.df,
                x='word_count',
                nbins=20,
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–∑—ã–≤–æ–≤',
                labels={'word_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤', 'count': '–ß–∞—Å—Ç–æ—Ç–∞'}
            )
            st.plotly_chart(fig_hist, use_container_width=True)

        with col2:
            # Box plot –¥–ª–∏–Ω—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
            fig_box = px.box(
                self.df,
                x='rating',
                y='word_count',
                title='–î–ª–∏–Ω–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º',
                labels={'rating': '–†–µ–π—Ç–∏–Ω–≥', 'word_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤'}
            )
            st.plotly_chart(fig_box, use_container_width=True)

        # –û–±–ª–∞–∫–æ —Å–ª–æ–≤
        st.subheader("‚òÅÔ∏è –û–±–ª–∞–∫–æ —Å–ª–æ–≤")
        if st.button("–°–æ–∑–¥–∞—Ç—å –æ–±–ª–∞–∫–æ —Å–ª–æ–≤"):
            all_text = ' '.join(self.df['clean_text'].dropna())
            if all_text.strip():
                wordcloud = WordCloud(
                    width=800,
                    height=400,
                    background_color='white',
                    max_words=100,
                    colormap='viridis'
                ).generate(all_text)

                fig, ax = plt.subplots(figsize=(10, 5))
                ax.imshow(wordcloud, interpolation='bilinear')
                ax.axis('off')
                st.pyplot(fig)

    def show_time_analysis(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑"""
        st.header("üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_data = self.df.set_index('date').resample('M').agg({
            'rating': 'mean',
            'sentiment_score': 'mean',
            'text': 'count'
        }).rename(columns={'text': 'review_count'})

        col1, col2 = st.columns(2)

        with col1:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            fig_line1 = px.line(
                x=monthly_data.index,
                y=monthly_data['review_count'],
                title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
                labels={'x': '–î–∞—Ç–∞', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤'}
            )
            st.plotly_chart(fig_line1, use_container_width=True)

        with col2:
            # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            fig_line2 = px.line(
                x=monthly_data.index,
                y=monthly_data['rating'],
                title='–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏',
                labels={'x': '–î–∞—Ç–∞', 'y': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥'}
            )
            st.plotly_chart(fig_line2, use_container_width=True)

    def show_detailed_reviews(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤"""
        st.header("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤")

        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2, col3 = st.columns(3)

        with col1:
            rating_filter = st.selectbox(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:",
                ["–í—Å–µ"] + list(sorted(self.df['rating'].unique()))
            )

        with col2:
            sentiment_filter = st.selectbox(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:",
                ["–í—Å–µ"] + list(self.df['sentiment_category'].unique())
            )

        with col3:
            sort_by = st.selectbox(
                "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ:",
                ["–î–∞—Ç–µ", "–†–µ–π—Ç–∏–Ω–≥—É", "–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"]
            )

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_df = self.df.copy()

        if rating_filter != "–í—Å–µ":
            filtered_df = filtered_df[filtered_df['rating'] == rating_filter]

        if sentiment_filter != "–í—Å–µ":
            filtered_df = filtered_df[filtered_df['sentiment_category'] == sentiment_filter]

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if sort_by == "–î–∞—Ç–µ":
            filtered_df = filtered_df.sort_values('date', ascending=False)
        elif sort_by == "–†–µ–π—Ç–∏–Ω–≥—É":
            filtered_df = filtered_df.sort_values('rating', ascending=False)
        else:
            filtered_df = filtered_df.sort_values('sentiment_score', ascending=False)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã
        st.write(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(filtered_df)}")

        for idx, row in filtered_df.head(10).iterrows():
            with st.expander(
                    f"–†–µ–π—Ç–∏–Ω–≥: {row['rating']} | –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {row['sentiment_category']} | {row['date'].strftime('%Y-%m-%d')}"):
                st.write(f"**–ê–≤—Ç–æ—Ä:** {row['author']}")
                st.write(f"**–¢–µ–∫—Å—Ç:** {row['text']}")
                st.write(f"**Score —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:** {row['sentiment_score']:.3f}")
                st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:** {row['word_count']}")

    def show_insights(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã"""
        st.header("üí° –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã")

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_reviews = len(self.df)
        avg_rating = self.df['rating'].mean()
        positive_ratio = len(self.df[self.df['sentiment_category'] == '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è']) / total_reviews * 100
        correlation = self.df['rating'].corr(self.df['sentiment_score'])

        insights = [
            f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ **{total_reviews}** –æ—Ç–∑—ã–≤–æ–≤",
            f"‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{avg_rating:.2f}** –∏–∑ 5",
            f"üòä **{positive_ratio:.1f}%** –æ—Ç–∑—ã–≤–æ–≤ –∏–º–µ—é—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
            f"üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é: **{correlation:.3f}**"
        ]

        if correlation > 0.5:
            insights.append("‚úÖ –í—ã—Å–æ–∫–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
        elif correlation > 0.3:
            insights.append("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
        else:
            insights.append("‚ùå –°–ª–∞–±–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞–º
        rating_dist = self.df['rating'].value_counts().sort_index()
        most_common_rating = rating_dist.idxmax()
        high_ratings = (rating_dist.get(4, 0) + rating_dist.get(5, 0)) / total_reviews * 100
        low_ratings = (rating_dist.get(1, 0) + rating_dist.get(2, 0)) / total_reviews * 100

        insights.extend([
            f"üèÜ –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π —Ä–µ–π—Ç–∏–Ω–≥: **{most_common_rating}**",
            f"üëç –í—ã—Å–æ–∫–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (4-5): **{high_ratings:.1f}%**",
            f"üëé –ù–∏–∑–∫–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (1-2): **{low_ratings:.1f}%**"
        ])

        for insight in insights:
            st.write(insight)

        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
        st.subheader("üéØ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã")

        col1, col2 = st.columns(2)

        with col1:
            st.write("**–°–∞–º—ã–π –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤:**")
            most_positive = self.df.loc[self.df['sentiment_score'].idxmax()]
            st.info(f"–†–µ–π—Ç–∏–Ω–≥: {most_positive['rating']}, Score: {most_positive['sentiment_score']:.3f}")
            st.write(f"*{most_positive['text']}*")

        with col2:
            st.write("**–°–∞–º—ã–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤:**")
            most_negative = self.df.loc[self.df['sentiment_score'].idxmin()]
            st.error(f"–†–µ–π—Ç–∏–Ω–≥: {most_negative['rating']}, Score: {most_negative['sentiment_score']:.3f}")
            st.write(f"*{most_negative['text']}*")

    def run_dashboard(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥"""
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        if not self.load_data():
            st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
            st.code("""
# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:
python src/scraping.py
python src/processing.py
python src/analysis.py
            """)
            return

        # –°–∞–π–¥–±–∞—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        pages = {
            "–ì–ª–∞–≤–Ω–∞—è": self.show_header,
            "–ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤": self.show_rating_analysis,
            "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏": self.show_sentiment_analysis,
            "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞": self.show_text_analysis,
            "–í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑": self.show_time_analysis,
            "–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã": self.show_detailed_reviews,
            "–ò–Ω—Å–∞–π—Ç—ã": self.show_insights
        }

        selected_page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", list(pages.keys()))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Å–µ–≥–¥–∞
        if selected_page == "–ì–ª–∞–≤–Ω–∞—è":
            self.show_header()
            st.markdown("### –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤!")
            st.write("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            pages[selected_page]()


def main():
    dashboard = ReviewDashboard()
    dashboard.run_dashboard()


if __name__ == "__main__":
    main()